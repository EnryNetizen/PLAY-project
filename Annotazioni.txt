Statement viene usato per query che non richiedono parametri
    Statement stmt = conn.createStatement();
    stmt.executeUpdate("INSERT INTO Employee (EmployeeID, Name, Position, Salary) VALUES (1, 'John Doe', 'Developer', 60000)");

PreparedStatement: Utilizzato per eseguire query SQL con parametri.
È più sicuro rispetto a Statement poiché aiuta a prevenire SQL Injection e può migliorare le prestazioni per query ripetute.
    String sql = "INSERT INTO Employee (EmployeeID, Name, Position, Salary) VALUES (?, ?, ?, ?)";
    PreparedStatement pstmt = conn.prepareStatement(sql);
    pstmt.setInt(1, 1);
    pstmt.setString(2, "John Doe");
    pstmt.setString(3, "Developer");
    pstmt.setDouble(4, 60000);
    pstmt.executeUpdate();

CallableStatement: Utilizzato per eseguire PROCEDURE memorizzate nel database.
    CallableStatement cstmt = conn.prepareCall("{call MyStoredProcedure(?)}");
    cstmt.setInt(1, 10);
    cstmt.execute();

L'autoCommit è una modalità di gestione delle transazioni in JDBC.
Quando l'autoCommit è abilitato, ogni operazione SQL (come un inserimento, aggiornamento o cancellazione) è automaticamente commessa (cioè salvata) nel database
non appena viene eseguita. In altre parole, ogni istruzione SQL viene considerata una transazione a sé stante.
con AutoCommit Disabilitato: Devi esplicitamente confermare (commettere) o annullare (rollback) le modifiche.
Questa modalità ti consente di raggruppare più operazioni SQL in una singola transazione atomica.
Devi chiamare commit() per salvare le modifiche o rollback() per annullarle se qualcosa va storto.
    conn.setAutoCommit(false); // Disabilita autoCommit

    try {
        Statement stmt = conn.createStatement();
        stmt.executeUpdate("INSERT INTO Employee (EmployeeID, Name, Position, Salary) VALUES (1, 'John Doe', 'Developer', 60000)");
        conn.commit(); // Conferma le modifiche
    } catch (SQLException e) {
        conn.rollback(); // Annulla le modifiche in caso di errore
        e.printStackTrace();
    } finally {
        conn.setAutoCommit(true); // Riabilita autoCommit se necessario
    }

*procedure